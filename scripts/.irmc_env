# $Id: .irmc_env 144 2022-11-24 18:22:59Z HMBJOrth $
# for documentation see https://github.com/fujitsu/iRMCtools
#
#
# Settings for iRMC tools based on bash and curl
#

# iRMC: IP Addr or name or FQDN of iRMC . Last entry wins ;-)
iRMC=${iRMC:-10.172.124.78}

# USER: iRMC User with appropriate rights (default: administrator)
USER=${iRMC_CRED%:*}
USER=${USER:-admin}                     # if iRMC_CRED not set use defaults

# PASSWD: Password for above USER (default: admin)
PASSWD=${iRMC_CRED#*:}
PASSWD=${PASSWD:-${DCDEFAULTPW:-admin}} # if iRMC_CRED not set use defaults

# CACERT: filename of CA file (doesn't matter if not existant)
CACERT=${0%/*}/DCMA.crt

# Debug files for troubleshooting
HEADERFILE=/tmp/header.log	# HTTPS header
REDFISHFILE=/tmp/redfish.log	# redfish commands
OUTPUTFILE=/tmp/output.log	# redfish output
JSONFILE=profile.json		# Default output file for profiles

# DEFAULTOPTIONS: add. options for curl. Can be changed according to network e.g. proxy settings
DEFAULTOPTIONS=" -D $HEADERFILE --silent --noproxy $iRMC"
# DEFAULT Content-Type - must be overwritten for some POST requests
ContentType=${ContentType:-"application/JSON; charset=UTF-8"}
# DEFAULT Browser for irmc_sso
BROWSER=ff

##########################################################
# Don't change lines below
##########################################################

# Get IP/FQDN for iRMC
# IP needed for PW hash / FQDN might be needed for TLS
if [[ "$iRMC" =~ ^[0-9]*\. ]] 
then
	iRMC_IP=$iRMC
	iRMC_FQDN=$iRMC
	host $iRMC >/dev/null && iRMC_FQDN=$(host $iRMC | awk '{print $NF}')
else
	host $iRMC >/dev/null && iRMC_IP=$(host $iRMC | awk '{print $NF}') || \
		echo invalid fqdn: $iRMC
	[ "$iRMC_IP" ] && iRMC_FQDN=$(host $iRMC | awk '{print $1}')
fi

# Some helper functions

# Repeat char count times
repeat() # count char
{
	printf "%${1}s" " " | tr " " "$2"
}

# Indent to level level
indent() # level [blanks_per_level] 
{
	repeat $(( $1 * ${2:-4} )) " "
}

# Draw a line with length count and opt. using char
line() # count [char]
{
	repeat $1 "${2:--}"
}

# Display timestamp and params
showinfo() # [param ...]
{
	[ "$1" = "-n" ] && { nl=" ";shift;} || nl="\n"
        msg=$(date "+%Y-%m-%d %H:%M:%S -- $*")
	printf "%s$nl" "$msg"
}

# Output a message on stdout
msg() # [param ...]
{
        showinfo $@
}

# Output an error message on stderr and exit with gven rc
error() # rc [param ...]
{
        rc=$1
        shift
        showinfo $@ >&2
        exit $rc
}

# Display debug info to stderr when debuglevel is appropriate
debugmsg()
{
        [ $1 -le $DEBUGLEVEL ] && msg debug $@ >&2
}

